<!--
Project structure

repo/
├─ shorts/                      # your short-form .md files live here
│  ├─ idea-a.md
│  ├─ thought-b.md
│  └─ ...
├─ shorts/manifest.json         # auto-generated by GitHub Action
├─ scripts/build_manifest.py    # scans shorts/ and writes manifest.json
├─ .github/workflows/manifest.yml
└─ shorts/index.html            # static page that renders expandable list
-->

<!-- ========================= .github/workflows/manifest.yml ========================= -->
<script type="text/plain" data-filename=".github/workflows/manifest.yml">
name: Build shorts manifest

on:
  push:
    paths:
      - 'shorts/**.md'
      - 'scripts/build_manifest.py'
      - '.github/workflows/manifest.yml'
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we need git history for last-modified times

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Build manifest
        run: |
          python scripts/build_manifest.py

      - name: Commit manifest
        run: |
          if [[ -n "$(git status --porcelain shorts/manifest.json)" ]]; then
            git config user.name "github-actions"
            git config user.email "actions@users.noreply.github.com"
            git add shorts/manifest.json
            git commit -m "Update shorts manifest"
            git push
          else
            echo "No changes to manifest.json"
          fi
</script>

<!-- ========================= scripts/build_manifest.py ========================= -->
<script type="text/plain" data-filename="scripts/build_manifest.py">
#!/usr/bin/env python3
import json, subprocess, pathlib, re

ROOT = pathlib.Path(__file__).resolve().parents[1]
SHORTS_DIR = ROOT / 'shorts'
MANIFEST = SHORTS_DIR / 'manifest.json'

md_files = sorted(SHORTS_DIR.glob('*.md'))
items = []
for p in md_files:
    # Last commit time (ISO 8601) for this file
    try:
        modified = subprocess.check_output([
            'git','log','-1','--format=%cI','--',str(p)
        ], cwd=ROOT).decode().strip()
    except subprocess.CalledProcessError:
        modified = None

    # Title = first non-empty line; strip leading markdown hashes
    title = p.stem
    with p.open('r', encoding='utf-8', errors='ignore') as f:
        for line in f:
            s = line.strip()
            if s:
                title = re.sub(r'^#+\s*', '', s)
                break

    items.append({
        'path': f'shorts/{p.name}',
        'slug': p.stem,
        'title': title,
        'modified': modified
    })

# Sort newest first by modified, falling back to filename
items.sort(key=lambda x: (x['modified'] or ''), reverse=True)

MANIFEST.parent.mkdir(parents=True, exist_ok=True)
with MANIFEST.open('w', encoding='utf-8') as f:
    json.dump({'generated': True, 'items': items}, f, ensure_ascii=False, indent=2)

print(f"Wrote {MANIFEST} with {len(items)} items")
</script>

<!-- ========================= shorts/index.html ========================= -->
<script type="text/plain" data-filename="shorts/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Shorts</title>
  <link rel="canonical" href="https://YOUR_DOMAIN/shorts/">
  <style>
    :root { --max: 900px; }
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 0; background: #0b0b0c; color: #e8e8ea; }
    header { max-width: var(--max); margin: 24px auto; padding: 0 16px; }
    h1 { font-size: 1.6rem; margin: 0 0 8px; }
    p.lede { opacity: .8; margin: 0 0 16px; }

    .list { max-width: var(--max); margin: 0 auto 64px; padding: 0 16px; display: grid; gap: 12px; }
    details { background: #141416; border: 1px solid #232327; border-radius: 14px; overflow: clip; }
    summary { cursor: pointer; padding: 14px 16px; list-style: none; display: flex; align-items: baseline; gap: 10px; }
    summary::-webkit-details-marker { display: none }
    .title { font-weight: 600; }
    .date { font: 12px/1.2 ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; opacity: .7; margin-left: auto; }
    .content { padding: 0 16px 16px; }
    .content :is(h1,h2){ font-size:1.1rem }
    .content pre { background: #0e0e11; padding: 12px; border-radius: 10px; overflow:auto; border:1px solid #232327 }
    .content a { color: #7ab7ff }
    .empty { opacity:.7; font-style: italic; padding: 24px; text-align: center; }
    .search { max-width: var(--max); margin: 0 auto 12px; padding: 0 16px; }
    .search input { width: 100%; border-radius: 12px; background: #141416; border:1px solid #232327; color:#e8e8ea; padding: 10px 12px; }
  </style>
</head>
<body>
  <header>
    <h1>Shorts</h1>
    <p class="lede">Quick notes & fragments, sorted by last update. Click to expand. Markdown is rendered client‑side.</p>
  </header>
  <div class="search"><input id="q" placeholder="Filter by title or content… (client‑side)" aria-label="Filter"></div>
  <div class="list" id="list" role="list"></div>

  <!-- Marked: fast client-side Markdown parser -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js" defer></script>
  <script>
  // Utility: fetch JSON with cache-busting so updates appear immediately
  async function fetchJSON(url){
    const u = new URL(url, location.href);
    u.searchParams.set('_', Date.now());
    const r = await fetch(u, {cache:'no-store'});
    if(!r.ok) throw new Error('Failed to load '+url);
    return r.json();
  }

  // Lazy-load markdown when a <details> opens
  async function loadMD(item, container){
    if(container.dataset.loaded) return;
    const r = await fetch(item.path, {cache:'no-store'});
    const md = await r.text();
    container.innerHTML = marked.parse(md);
    container.dataset.loaded = '1';
  }

  // Simple client-side search across titles + loaded content
  function wireSearch(){
    const input = document.querySelector('#q');
    input.addEventListener('input', () => {
      const term = input.value.trim().toLowerCase();
      for(const el of document.querySelectorAll('details[data-title]')){
        const title = el.dataset.title;
        const body = el.querySelector('.content').textContent.toLowerCase();
        const hit = !term || title.includes(term) || body.includes(term);
        el.style.display = hit ? '' : 'none';
      }
    });
  }

  (async function init(){
    const list = document.getElementById('list');
    try {
      const m = await fetchJSON('manifest.json');
      const items = (m.items || []).slice().sort((a,b)=> (a.modified<b.modified?1:-1));
      if(!items.length){ list.innerHTML = '<div class="empty">No shorts yet.</div>'; return; }

      for(const item of items){
        const d = new Date(item.modified || Date.now());
        const el = document.createElement('details');
        el.setAttribute('role','listitem');
        el.dataset.title = (item.title||'').toLowerCase();
        el.innerHTML = `
          <summary>
            <span class="title">${item.title || item.slug}</span>
            <span class="date" title="Last modified">${d.toLocaleString([], {year:'numeric', month:'short', day:'2-digit'})}</span>
          </summary>
          <div class="content"></div>
        `;
        const content = el.querySelector('.content');
        el.addEventListener('toggle', () => { if(el.open) loadMD(item, content); }, {once:false});
        list.appendChild(el);
      }

      wireSearch();
    } catch (e) {
      console.error(e);
      list.innerHTML = '<div class="empty">Could not load manifest.json.</div>';
    }
  })();
  </script>
</body>
</html>
</script>

<!-- ========================= Example shorts/idea-a.md ========================= -->
<script type="text/plain" data-filename="shorts/idea-a.md"># A sketch about subgame perfection

Short riff on subgame‑perfect equilibria in repeated signaling games…</script>

<script type="text/plain" data-filename="shorts/thought-b.md"># Rights vs. liberties: a note

Rights are selective constraints on liberty to maximize aggregate welfare…</script>
